{"version":3,"sources":["const.ts","store/reducers/userActions.ts","store/reducers/tableCharactersReducer.ts","store/configureStore.ts","store/index.ts","api/request.ts","env.ts","store/actions/requestToServerWithData.ts","utils/determinateDisableBtnPagination.ts","components/Table/BtnOfPaginationTable/BtnOfPaginationTable.tsx","utils/directionBtnClickPagination.ts","components/Table/Row/NameRowInTable/NameRowInTable.tsx","components/Table/Row/LabelTextTable/LabelTextTable.tsx","components/Table/Row/RowInTable/RowInTable.tsx","components/Table/Row/TableWithRows/TableWithRows.tsx","components/Table/TablePageLoader/TablePageLoader.tsx","components/Table/Search Panel Table/SearchInputInTable/SearchInputInTable.tsx","store/actions/userRecordNameForSearch.ts","components/Table/Search Panel Table/SearchBtnInTable/SearchBtnInTable.tsx","components/Table/Search Panel Table/SearchPanelInTable/SearchPanelInTable.tsx","components/Table/TablePage/TablePage.tsx","App.tsx","index.tsx"],"names":["REQUEST_TO_SERVER_FROM_DATA","SUCCESS_TO_SERVER_FROM_DATA","ERROR_TO_SERVER_FROM_DATA","USER_RECORD_NAME_FOR_SEARCH","paginationVariable","variableRowInTable","nameRowInTable","initialState","nameFromUser","dataOfTable","pagination","isLoading","isError","pageId","allReducers","combineReducers","tableCharactersReducer","state","type","data","userActions","name","devtoolMiddleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","f","store","createStore","compose","applyMiddleware","thunk","logger","getToServer","idPage","a","Promise","_","reject","setTimeout","fetch","json","race","requestToServerWithData","dispatch","then","response","hasOwnProperty","count","error","previous","next","results","catch","determinateDisableBtnPagination","typePagination","memo","connect","getToServerFromData","btnOfPaginationVariable","map","value","index","className","onClick","func","direction","directionBtnClickPagination","disabled","NameRowInTable","arrayNameRowInTable","LabelTextTable","text","RowInTable","values","arrayLabelTextTable","rowsWithDataOfPerson","length","useLayoutEffect","recordName","onChange","e","currentTarget","searchName","TablePage","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06b439b0.chunk.js","sourcesContent":["const REQUEST_TO_SERVER_FROM_DATA = 'REQUEST_TO_SERVER_FROM_DATA'\r\nconst SUCCESS_TO_SERVER_FROM_DATA = 'SUCCESS_TO_SERVER_FROM_DATA'\r\nconst ERROR_TO_SERVER_FROM_DATA = 'ERROR_TO_SERVER_FROM_DATA'\r\n\r\nconst REQUEST_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME =\r\n  'REQUEST_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME'\r\nconst SUCCESS_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME =\r\n  'SUCCESS_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME'\r\nconst ERROR_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME =\r\n  'ERROR_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME'\r\n\r\nconst USER_RECORD_NAME_FOR_SEARCH = 'USER_RECORD_NAME_FOR_SEARCH'\r\n\r\nconst paginationVariable = ['back', 'next']\r\nconst variableRowInTable = ['name', 'gender', 'mass', 'eye_color']\r\nconst nameRowInTable = ['Name', 'Gender', 'Mass', 'Eye color']\r\n\r\nexport {\r\n  REQUEST_TO_SERVER_FROM_DATA,\r\n  USER_RECORD_NAME_FOR_SEARCH,\r\n  SUCCESS_TO_SERVER_FROM_DATA,\r\n  ERROR_TO_SERVER_FROM_DATA,\r\n  REQUEST_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME,\r\n  SUCCESS_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME,\r\n  ERROR_TO_SERVER_FROM_DATA_WITH_SEARCH_NAME,\r\n  paginationVariable,\r\n  variableRowInTable,\r\n  nameRowInTable,\r\n}\r\n","import { USER_RECORD_NAME_FOR_SEARCH } from '../../const'\r\n\r\nconst initialState = {\r\n  nameFromUser: '',\r\n}\r\n\r\nexport const userActions = (\r\n  state = initialState,\r\n  {\r\n    type,\r\n    name,\r\n  }: {\r\n    type: string\r\n    name: string\r\n  },\r\n) => {\r\n  switch (type) {\r\n    case USER_RECORD_NAME_FOR_SEARCH:\r\n      return {\r\n        ...state,\r\n        nameFromUser: name,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  ERROR_TO_SERVER_FROM_DATA,\r\n  REQUEST_TO_SERVER_FROM_DATA,\r\n  SUCCESS_TO_SERVER_FROM_DATA,\r\n} from '../../const'\r\n\r\nconst initialState = {\r\n  dataOfTable: [],\r\n  pagination: [],\r\n  isLoading: false,\r\n  isError: false,\r\n  pageId: 1,\r\n}\r\n\r\nexport const tableCharactersReducer = (\r\n  state = initialState,\r\n  {\r\n    type,\r\n    data,\r\n    pagination,\r\n    pageId,\r\n  }: {\r\n    type: string\r\n    data: any[]\r\n    pagination: (string | null)[]\r\n    pageId: number\r\n  },\r\n) => {\r\n  switch (type) {\r\n    case REQUEST_TO_SERVER_FROM_DATA:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      }\r\n    case SUCCESS_TO_SERVER_FROM_DATA:\r\n      return {\r\n        ...state,\r\n        dataOfTable: data,\r\n        pagination: pagination,\r\n        isLoading: false,\r\n        isError: false,\r\n        pageId: pageId,\r\n      }\r\n    case ERROR_TO_SERVER_FROM_DATA:\r\n      return {\r\n        ...state,\r\n        dataOfTable: [],\r\n        pagination: [],\r\n        isLoading: false,\r\n        isError: true,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { userActions } from './reducers/userActions'\r\nimport { combineReducers } from 'redux'\r\nimport { tableCharactersReducer } from './reducers/tableCharactersReducer'\r\n\r\nexport const allReducers = combineReducers({\r\n  tableCharactersReducer,\r\n  userActions,\r\n})\r\n","import { applyMiddleware, compose, createStore } from 'redux'\r\n\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nimport { allReducers } from './configureStore'\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst ext = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nconst devtoolMiddleware = ext && process.env.NODE_ENV === 'development' ? ext() : (f: any) => f;\r\n\r\nexport const store = createStore(allReducers, compose( applyMiddleware(thunk, logger), devtoolMiddleware))\r\n","import { URL_TABLE } from '../env'\r\n\r\nconst getToServer = async (nameFromUser: string, idPage: number) => {\r\n  return Promise.race([\r\n    new Promise((_, reject) => {\r\n      setTimeout(() => {\r\n        reject('Error connection')\r\n      }, 10000)\r\n    }),\r\n    await (await fetch(`${URL_TABLE}${nameFromUser}&page=${idPage}`)).json(),\r\n  ])\r\n}\r\nexport { getToServer }\r\n","export const URL_TABLE = 'https://swapi.dev/api/people/?search='\r\n","import {\r\n  REQUEST_TO_SERVER_FROM_DATA,\r\n  SUCCESS_TO_SERVER_FROM_DATA,\r\n  ERROR_TO_SERVER_FROM_DATA,\r\n} from '../../const'\r\nimport { getToServer } from '../../api/request'\r\n\r\nconst requestToServerWithData = (nameFromUser: string, pageId: number) => {\r\n  return (dispatch: any) => {\r\n    dispatch({\r\n      type: REQUEST_TO_SERVER_FROM_DATA,\r\n    })\r\n\r\n    getToServer(nameFromUser, pageId)\r\n      .then((response) => {\r\n        if (!response.hasOwnProperty('detail')) {\r\n          if (response.count === 0) {\r\n            dispatch({\r\n              type: SUCCESS_TO_SERVER_FROM_DATA,\r\n              data: [{ error: 'None similar to your request' }],\r\n              pagination: [response.previous, response.next],\r\n              pageId: 1,\r\n            })\r\n          } else {\r\n            dispatch({\r\n              type: SUCCESS_TO_SERVER_FROM_DATA,\r\n              data: response.results,\r\n              pagination: [response.previous, response.next],\r\n              pageId: pageId,\r\n            })\r\n          }\r\n        } else {\r\n          dispatch({\r\n            type: ERROR_TO_SERVER_FROM_DATA,\r\n          })\r\n        }\r\n      })\r\n      .catch((_) => {\r\n        dispatch({\r\n          type: ERROR_TO_SERVER_FROM_DATA,\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport { requestToServerWithData }\r\n","const determinateDisableBtnPagination = (\r\n  typePagination: string | null,\r\n  isLoading: boolean,\r\n  isError: boolean,\r\n) => {\r\n  if (isLoading || isError) {\r\n    return true\r\n  } else {\r\n    if (typeof typePagination === 'object') {\r\n      return true\r\n    } else if (typeof typePagination === 'string') {\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\nexport { determinateDisableBtnPagination }\r\n","import { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { paginationVariable } from '../../../const'\r\nimport { requestToServerWithData } from '../../../store/actions/requestToServerWithData'\r\nimport { determinateDisableBtnPagination } from '../../../utils/determinateDisableBtnPagination'\r\nimport { directionBtnClickPagination } from '../../../utils/directionBtnClickPagination'\r\nimport './_BtnOfPaginationTable.css'\r\n\r\ntype BtnOfPaginationTableProps = {\r\n  isLoading: boolean\r\n  isError: boolean\r\n  pagination: (string | null)[]\r\n  getToServerFromData: any\r\n  pageId: number\r\n  name: string\r\n}\r\n\r\nconst BtnOfPaginationTable = ({\r\n  pagination,\r\n  isLoading,\r\n  isError,\r\n  getToServerFromData,\r\n  pageId,\r\n  name,\r\n}: BtnOfPaginationTableProps) => {\r\n  const btnOfPaginationVariable = paginationVariable.map((value, index) => {\r\n    return (\r\n      <button\r\n        className={`table-page__btn-pagintaion--${value}`}\r\n        key={index}\r\n        onClick={() =>\r\n          directionBtnClickPagination(\r\n            pageId,\r\n            getToServerFromData,\r\n            pagination[index],\r\n            value,\r\n            name,\r\n          )\r\n        }\r\n        disabled={determinateDisableBtnPagination(\r\n          pagination[index],\r\n          isLoading,\r\n          isError,\r\n        )}\r\n      >\r\n        {value === 'next' ? '>' : '<'}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  return <>{btnOfPaginationVariable}</>\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  tableCharactersReducer,\r\n  userActions,\r\n}: {\r\n  tableCharactersReducer: any\r\n  userActions: any\r\n}) => ({\r\n  name: userActions.nameFromUser,\r\n  pagination: tableCharactersReducer.pagination,\r\n  isLoading: tableCharactersReducer.isLoading,\r\n  isError: tableCharactersReducer.isError,\r\n  pageId: tableCharactersReducer.pageId,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  getToServerFromData: (nameFromUser: string, pageId: number) =>\r\n    dispatch(requestToServerWithData(nameFromUser, pageId)),\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapDispatchToProps)(BtnOfPaginationTable),\r\n)\r\n","import { paginationVariable } from '../const'\r\n\r\nconst directionBtnClickPagination = (\r\n  pageId: number,\r\n  func: any,\r\n  pagination: null | string,\r\n  direction: string,\r\n  name: string,\r\n) => {\r\n  if (direction === paginationVariable[1]) {\r\n    if (pagination !== null) {\r\n      pageId++\r\n      func(name, pageId)\r\n    }\r\n  } else {\r\n    if (pagination !== null) {\r\n      pageId--\r\n      func(name, pageId)\r\n    }\r\n  }\r\n}\r\n\r\nexport { directionBtnClickPagination }\r\n","import { nameRowInTable } from '../../../../const'\r\nimport './_NameRowInTable.css'\r\n\r\nexport const NameRowInTable = () => {\r\n  let arrayNameRowInTable = nameRowInTable.map((value, index) => {\r\n    return (\r\n      <th className=\"table__name-row-th\" key={index}>\r\n        {value}\r\n      </th>\r\n    )\r\n  })\r\n  return (\r\n    <thead className=\"table__thead\">\r\n      <tr className=\"table__name-row-tr\">{arrayNameRowInTable}</tr>\r\n    </thead>\r\n  )\r\n}\r\n","import { memo } from 'react'\r\n\r\ntype LabelTextTableProps = {\r\n  className: string\r\n  text: string\r\n}\r\n\r\nconst LabelTextTable = ({ className, text }: LabelTextTableProps) => {\r\n  return <td className={className}>{text}</td>\r\n}\r\n\r\nexport default memo(LabelTextTable)\r\n","import { memo } from 'react'\r\nimport { variableRowInTable } from '../../../../const'\r\nimport { LabelTextTable } from '../LabelTextTable/index'\r\n\r\ntype RowInTableProps = {\r\n  values: {\r\n    [index: string]: any\r\n  }\r\n}\r\n\r\nconst RowInTable = ({ values }: RowInTableProps) => {\r\n  const arrayLabelTextTable = variableRowInTable.map((value, index) => {\r\n    return (\r\n      <LabelTextTable\r\n        text={values[value]}\r\n        key={index}\r\n        className={value + '-style'}\r\n      />\r\n    )\r\n  })\r\n\r\n  return <tr>{arrayLabelTextTable}</tr>\r\n}\r\n\r\nexport default memo(RowInTable)\r\n","import { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { NameRowInTable } from '../NameRowInTable'\r\nimport { RowInTable } from '../RowInTable/index'\r\nimport './_TableWithRows.css'\r\n\r\ntype TableWithRowsProps = {\r\n  data: {\r\n    [index: string]: any\r\n  }\r\n}\r\n\r\nconst TableWithRows = ({ data }: TableWithRowsProps) => {\r\n  const rowsWithDataOfPerson = data.map((value: any, index: number) => {\r\n    if (value.hasOwnProperty('error')) {\r\n      return ''\r\n    } else {\r\n      return <RowInTable key={index} values={value} />\r\n    }\r\n  })\r\n  if (data.length !== 0 && data[0].hasOwnProperty('error')) {\r\n    return <p className=\"table-page__p-error\">{data[0].error}.</p>\r\n  } else {\r\n    return (\r\n      <table className=\"table-page__table\">\r\n        <NameRowInTable />\r\n        <tbody>{rowsWithDataOfPerson}</tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  tableCharactersReducer,\r\n}: {\r\n  tableCharactersReducer: any\r\n}) => ({\r\n  data: tableCharactersReducer.dataOfTable,\r\n})\r\n\r\nexport default memo(connect(mapStateToProps)(TableWithRows))\r\n","import { memo, useLayoutEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { requestToServerWithData } from '../../../store/actions/requestToServerWithData'\r\nimport { TableWithRows } from '../Row/TableWithRows'\r\nimport './_TablePageLoader.css'\r\n\r\ntype TablePageLoaderProps = {\r\n  isLoading: boolean\r\n  isError: boolean\r\n  data: any[]\r\n  getToServerFromData: any\r\n}\r\nconst TablePageLoader = ({\r\n  isLoading,\r\n  data,\r\n  isError,\r\n  getToServerFromData,\r\n}: TablePageLoaderProps) => {\r\n  useLayoutEffect(() => {\r\n    if (data.length === 0 && !isLoading && !isError) getToServerFromData('', 1)\r\n  })\r\n\r\n  return isLoading ? (\r\n    <p className=\"table-page__p-loader\">Loading...</p>\r\n  ) : isError ? (\r\n    <p className=\"table-page__p-error\">\r\n      Bad connection with server. Reload page, please.\r\n    </p>\r\n  ) : (\r\n    <div className=\"table-page__container-rows\">\r\n      <TableWithRows />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  tableCharactersReducer,\r\n}: {\r\n  tableCharactersReducer: any\r\n}) => ({\r\n  isLoading: tableCharactersReducer.isLoading,\r\n  isError: tableCharactersReducer.isError,\r\n  data: tableCharactersReducer.dataOfTable,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  getToServerFromData: (name: string, pageId: number) =>\r\n    dispatch(requestToServerWithData(name, pageId)),\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapDispatchToProps)(TablePageLoader),\r\n)\r\n","import { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { userRecordNameForSearch } from '../../../../store/actions/userRecordNameForSearch'\r\nimport './_SearchInputInTable.css'\r\n\r\ntype SearcgInputInTable = {\r\n  recordName: any\r\n  isLoading: boolean\r\n  isError: boolean\r\n}\r\n\r\nconst SearchInputInTable = ({\r\n  recordName,\r\n  isLoading,\r\n  isError,\r\n}: SearcgInputInTable) => {\r\n  let determinateDisabledInputSearch = () => {\r\n    return isLoading || isError\r\n  }\r\n  return (\r\n    <input\r\n      className=\"form__search-input\"\r\n      disabled={determinateDisabledInputSearch()}\r\n      onChange={(e) => {\r\n        recordName(e.currentTarget.value)\r\n      }}\r\n    ></input>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  tableCharactersReducer,\r\n}: {\r\n  tableCharactersReducer: any\r\n}) => ({\r\n  isLoading: tableCharactersReducer.isLoading,\r\n  isError: tableCharactersReducer.isError,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  recordName: (name: string) => dispatch(userRecordNameForSearch(name)),\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapDispatchToProps)(SearchInputInTable),\r\n)\r\n","import { USER_RECORD_NAME_FOR_SEARCH } from '../../const'\r\n\r\nconst userRecordNameForSearch = (nameFromUser: string) => {\r\n  return (dispatch: any) => {\r\n    dispatch({\r\n      type: USER_RECORD_NAME_FOR_SEARCH,\r\n      name: nameFromUser,\r\n    })\r\n  }\r\n}\r\n\r\nexport { userRecordNameForSearch }\r\n","import { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { requestToServerWithData } from '../../../../store/actions/requestToServerWithData'\r\nimport './_SearchBtnTable.css'\r\n\r\ntype SearchBtnInTableProps = {\r\n  name: string\r\n  searchName: any\r\n  isLoading: boolean\r\n  isError: boolean\r\n}\r\n\r\nconst SearchBtnInTable = ({\r\n  name,\r\n  searchName,\r\n  isLoading,\r\n  isError,\r\n}: SearchBtnInTableProps) => {\r\n  let determinateDisabledBtnSearch = () => {\r\n    return isLoading || isError\r\n  }\r\n  return (\r\n    <button\r\n      className=\"form__btn-search\"\r\n      disabled={determinateDisabledBtnSearch()}\r\n      onClick={() => {\r\n        searchName(name, 1)\r\n      }}\r\n    >\r\n      Search\r\n    </button>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  userActions,\r\n  tableCharactersReducer,\r\n}: {\r\n  userActions: any\r\n  tableCharactersReducer: any\r\n}) => ({\r\n  name: userActions.nameFromUser,\r\n  isLoading: tableCharactersReducer.isLoading,\r\n  isError: tableCharactersReducer.isError,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  searchName: (name: string, pageId: number) =>\r\n    dispatch(requestToServerWithData(name, pageId)),\r\n})\r\n\r\nexport default memo(\r\n  connect(mapStateToProps, mapDispatchToProps)(SearchBtnInTable),\r\n)\r\n","import { memo } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { SearchInputInTable } from '../SearchInputInTable'\r\nimport { SearchBtnInTable } from '../SearchBtnInTable'\r\nimport './_SearchPanelTable.css'\r\n\r\nconst SearchPanelInTable = () => {\r\n  return (\r\n    <form className=\"table-page__form\">\r\n      <SearchInputInTable />\r\n      <SearchBtnInTable />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default memo(connect()(SearchPanelInTable))\r\n","import { memo } from 'react'\r\nimport { BtnOfPaginationTable } from '../BtnOfPaginationTable'\r\nimport { TablePageLoader } from '../TablePageLoader'\r\nimport { SearchPanelInTable } from '../Search Panel Table/SearchPanelInTable'\r\nimport './_TablePage.css'\r\n\r\nconst TablePage = () => {\r\n  return (\r\n    <div className=\"table-page\">\r\n      <SearchPanelInTable />\r\n      <TablePageLoader />\r\n      <div className=\"table-page__btn-pagination-container\">\r\n        <BtnOfPaginationTable />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(TablePage)\r\n","import './App.css'\nimport { TablePage } from './components/Table/TablePage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TablePage />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { store } from './store/index'\nimport App from './App'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}